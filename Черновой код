# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
direction = LEFT

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    ball_vel = [0, 0]
    ball_vel[0], ball_vel[1] = 10, 10 #random.randrange(60, 180), random.randrange(120, 140)
    if direction == RIGHT:
        ball_vel[0], ball_vel[1] = ball_vel[0], - ball_vel[1] 
    elif direction == LEFT:
        ball_vel[0], ball_vel[1] = ball_vel[0], - ball_vel[1] 
    elif direction == 'ceiling':
        ball_vel[0], ball_vel[1] = - ball_vel[0], ball_vel[1]
        
    

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    spawn_ball(direction)
    score1, score2 = 0, 0
    paddle1_vel = 0
    paddle2_vel = 0
    paddle1_pos = [[2, HEIGHT / 2 - HALF_PAD_HEIGHT  + 3],
                   [PAD_WIDTH - 2, HEIGHT / 2 - HALF_PAD_HEIGHT + 3],
                   [PAD_WIDTH - 2, HEIGHT / 2 + HALF_PAD_HEIGHT  - 3],
                   [2, HEIGHT / 2 + HALF_PAD_HEIGHT - 3]]
    paddle2_pos = [[WIDTH - 2, HEIGHT / 2 - HALF_PAD_HEIGHT + 3],
                   [WIDTH - (PAD_WIDTH - 2), HEIGHT / 2 - HALF_PAD_HEIGHT + 3],
                   [WIDTH - (PAD_WIDTH - 2), HEIGHT / 2 + HALF_PAD_HEIGHT - 3],
                   [WIDTH - 2, HEIGHT / 2 + HALF_PAD_HEIGHT - 3]]

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
 
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")  
    # update ball
    if ball_pos[1] <=  BALL_RADIUS or ball_pos[1] >= HEIGHT - BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    # draw ball
    canvas.draw_circle([ball_pos[0], ball_pos[1]], BALL_RADIUS, 2 * BALL_RADIUS, "White")
   # print ball_pos[0], ball_pos[1]
    # update paddle's vertical position, keep paddle on the screen
    paddle1_pos[0][1] += paddle1_vel
    paddle1_pos[1][1] += paddle1_vel
    paddle1_pos[2][1] += paddle1_vel
    paddle1_pos[3][1] += paddle1_vel 
    paddle2_pos[0][1] += paddle2_vel
    paddle2_pos[1][1] += paddle2_vel
    paddle2_pos[2][1] += paddle2_vel 
    paddle2_pos[3][1] += paddle2_vel

     

    canvas.draw_polygon([(paddle1_pos[0]),(paddle1_pos[1]),
                         (paddle1_pos[2]), (paddle1_pos[3])], 6, "white")
    canvas.draw_polygon([(paddle2_pos[0]),(paddle2_pos[1]),
                         (paddle2_pos[2]), (paddle2_pos[3])], 6, "white")
   
    
    # determine whether paddle and ball collide
    
    if ball_pos[0] - BALL_RADIUS <= PAD_WIDTH and paddle1_pos[1][1] - BALL_RADIUS <= ball_pos[1] <= paddle1_pos[2][1] + ball_pos[1]:
        spawn_ball('ceiling')
    elif ball_pos[0] + BALL_RADIUS >= WIDTH - PAD_WIDTH and paddle2_pos[1][1] + BALL_RADIUS <= ball_pos[1] <= paddle2_pos[2][1] + ball_pos[1]:
        spawn_ball('ceiling')    
    
    # draw scores
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel -= 1
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel += 1
    elif key == simplegui.KEY_MAP["up"]:
        paddle2_vel -= 1
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel += 1
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP["up"]:
        paddle2_vel = 0
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 0


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)


# start frame
new_game()
frame.start()
